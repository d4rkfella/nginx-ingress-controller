name: Build Docker Image

on:
  push:
    branches:
      - main
    paths:
      - 'wolfi-nginx-ingress-controller.yaml'
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

    - name: Set up Cosign
      uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1

    - name: Log in to GitHub Container Registry (GHCR)
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 #v3.3.0
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ghcr.io

    - uses: distroless/actions/apko-publish@main
      id: apko
      with:
        config: wolfi-nginx-ingress-controller.yaml
        tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:1.12.0

    - name: Extract digest
      shell: bash
      run: |
        echo DIGEST=$(echo "${{ steps.apko.outputs.digest }}" | awk -F@ '{print $2}') >> $GITHUB_ENV

    - name: Attest
      uses: actions/attest-build-provenance@bd77c077858b8d561b7a36cbe48ef4cc642ca39d # v2.2.2
      id: attest
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ env.DIGEST }}
        push-to-registry: true

    - name: Sign the image
      run: |
        cosign sign --yes \
          ${{ steps.apko.outputs.digest }}
      env:
        COSIGN_EXPERIMENTAL: 1

    - name: Verify the pushed tags
      run: |
        cosign verify --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
          --certificate-identity-regexp "https://github.com/d4rkfella/*" \
          ${{ steps.apko.outputs.digest }}
      env:
        COSIGN_EXPERIMENTAL: 1

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.apko.outputs.digest }}
        format: 'table'
        exit-code: '1'
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
